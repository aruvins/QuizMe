import styles from "@/styles/Home.module.css";
import {
  Button,
  Input,
  Typography,
  CircularProgress,
  Box,
  Stack,
  Divider,
} from "@mui/joy";
import Head from "next/head";
import { useState, useEffect } from 'react';
import useSWR from "swr";


const fetcher = (url, userText, setShouldFetch) => {
  let data = fetch(url, {
    method: "POST",
    body: JSON.stringify({ text: userText }),
  }).then((r) => r.json());
  console.log("Sending to backend", userText);
  setShouldFetch(false);
  return data;
};

export default function Home() {
  const [questions, setQuestions] = useState();
  const [userText, setUserText] = useState();
  const [shouldFetch, setShouldFetch] = useState(false);

  const { data, error, isLoading } = useSWR(
    shouldFetch ? "/api/send-text" : null,
    (url) => fetcher(url, userText, setShouldFetch)
  );

  const handleTextAreaChange = (event) => {
    setUserText(event.target.value);
    console.log("Text area change logged");
  };

  const sendDocument = () => {
    setShouldFetch(true);
  };

  const [wikiSummary, setWikiSummary] = useState(null);

  const fetchWikipediaSummary = async (text) => {
    try {
      const response = await fetch(`https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(text)}`);
      if (response.ok) {
        const data = await response.json();
        setWikiSummary(data.extract);
      } else {
        setWikiSummary(null);
      }
    } catch (error) {
      console.error('Error fetching Wikipedia summary:', error);
      setWikiSummary(null);
    }
  };

  useEffect(() => {
    const handleMouseUp = () => {
      const selectedText = window.getSelection().toString().trim();
      if (selectedText) {
        fetchWikipediaSummary(selectedText);
      }
    };
  
    document.addEventListener('mouseup', handleMouseUp);
    return () => {
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, []);

  function display() {
    if (isLoading) {
      return <CircularProgress />;
    }

    if (data === undefined) {
      return <Box></Box>;
    }

    if (error) {
      return <div>{error}</div>;
    }

    return (
      <Stack
        direction={"column"}
        sx={{
          backgroundColor: "white",
        }}
      >
        {data.output_array.map((object) => (
          <Box sx={{ display: "flex", flexDirection: "row" }}>
            <Typography variant="outlined" color="white">
              {object.question}
            </Typography>
            <Box sx={{ width: "10%" }}></Box>
            <Typography variant="outlined" color="white">
              {object.answer}
            </Typography>
          </Box>
        ))}
      </Stack>
    );
  }

  return (
    <>
      <Head>
        <title>QuizMe.com</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link
          rel="icon"
          href="https://media.istockphoto.com/id/1005384502/vector/human-brain-icon-vector.jpg?s=612x612&w=0&k=20&c=iDiuZfC9HgPWSj-YM0HxaCSTgg3wg0fBDcpQj3qrShs="
        />
      </Head>
      <main>
        <Stack
          sx={{
            backgroundColor: "#dcd0ff",
            position: "fixed",
            top: 0,
            left: 0,
            width: "15dvw",
            height: "100dvh",
            alignItems: "center",
          }}
        >
          <Typography
            width={"100%"}
            sx={{ background: "4px black solid" }}
            justifyContent="center"
            level="h4"
          >
            Saved Quizes
          </Typography>

          <Divider />
          <Box sx={{ height: "80%" }} />
          <Button fullWidth>
            <Typography color="white" level="h5">
              Add New Quiz
            </Typography>
          </Button>
          
          <Button>
            Logout
          </Button>

        </Stack>
        <Box className={styles.main}>
          <Input
            onChange={handleTextAreaChange}
            className={styles.textarea}
            placeholder="Type something..."
          />
          <Button onClick={sendDocument}>Submit</Button>
          <div>{display()}</div>
        </Box>
      </main>
    </>
  );
}
